<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:os="http://www.mulesoft.org/schema/mule/os"
	xmlns:telegram="http://www.mulesoft.org/schema/mule/telegram"
	xmlns:slack="http://www.mulesoft.org/schema/mule/slack" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/slack http://www.mulesoft.org/schema/mule/slack/current/mule-slack.xsd
http://www.mulesoft.org/schema/mule/telegram http://www.mulesoft.org/schema/mule/telegram/current/mule-telegram.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd">
	<flow name="implementationFlow" doc:id="62f7a9aa-b497-4414-8b07-8d7bfe3106b3" >
		<scheduler doc:name="Scheduler" doc:id="a7c7f22b-b3cb-4933-b919-3904dddfd464" >
			<scheduling-strategy >
				<fixed-frequency frequency="5" timeUnit="SECONDS"/>
			</scheduling-strategy>
		</scheduler>
		<os:retrieve doc:name="updateId" doc:id="9d037029-dc3f-445a-9edb-2e819ff6927d" key="updateId" target="updateId">
			<os:default-value ><![CDATA[#[5656565656556]]]></os:default-value>
		</os:retrieve>
		<telegram:get-updates doc:name="fromChat" doc:id="41503d10-a5e0-4dd1-a5e7-e3f4bdbadab2" config-ref="Telegram_Connector_Config" offset="#[vars.updateId]" limit="#[1]"/>
		<choice doc:name="Choice" doc:id="8b2a663f-3da6-4257-a2ce-eafdb4f67e6a" >
			<when expression="#[not isEmpty(payload.result)]">
				<os:store doc:name="updateId" doc:id="b007f81a-b793-4ed8-892b-97da6e340536" key="updateId">
			<os:value><![CDATA[#[(max(payload.result.*update_id default [])) + 1]]]></os:value>
		</os:store>
				<flow-ref doc:name="answerFlow" doc:id="3bd7e655-5714-4bdf-8445-8343846bdc35" name="answerFlow"/>
				<logger level="INFO" doc:name="payload" doc:id="83112316-383e-4b15-832e-45ff55f1ff0f" message="#[payload]"/>
			</when>
		</choice>
	</flow>
	<sub-flow name="answerFlow" doc:id="47d8a535-99df-484b-8e9f-3a55a8268d18" >
		<choice doc:name="Choice" doc:id="a671b108-b398-4bc1-877a-55b43831e1cf" >
			<when expression='#[payload.result[0].message.text == "/start"]' >
				<os:store doc:name="Store last message" doc:id="8135b6fd-72e2-4780-b65c-40b6bd2587e1" key="#[payload.result[0].message.from.id]">
					<os:value><![CDATA[#[payload.result[0].message.text]]]></os:value>
				</os:store>
				<ee:transform doc:name="set hello message" doc:id="9ff197ec-34c8-42f6-83b0-7222c7993f42" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	chat_id: payload.result[0].message.chat.id,
	text: "Hi. Select, what you want to get /drinksbyname, /foodbyname"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<telegram:send-message doc:name="Say Hello" doc:id="7d7fc199-e0d4-4dd1-aefb-c569dea70034" config-ref="Telegram_Connector_Config" />
			</when>
			<when expression='#[payload.result[0].message.text == "/drinksbyname"]' >
				<os:store doc:name="Store last message" doc:id="f6de7a9b-ad37-4f5f-a9ae-0935934c77cf" key="#[payload.result[0].message.from.id]">
					<os:value><![CDATA[#[payload.result[0].message.text]]]></os:value>
				</os:store>
				<ee:transform doc:name="set input ingridient message" doc:id="157137fd-6bc4-45ca-b794-fea9410d7e30" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	chat_id: payload.result[0].message.chat.id,
	text: "Input Cocktail Name"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<telegram:send-message doc:name="Input cocktail Name" doc:id="6bdfc741-c76a-439c-9675-46ffa998503e" config-ref="Telegram_Connector_Config"/>
			</when>
			<when expression='#[payload.result[0].message.text == "/foodbyname"]'>
				<os:store doc:name="Store" doc:id="c30d143f-7b1a-44a5-8667-7ffe91b89282" key="#[payload.result[0].message.from.id]">
					<os:value ><![CDATA[#[payload.result[0].message.text]]]></os:value>
				</os:store>
			</when>
			<otherwise>
				<os:retrieve doc:name="lastMessage" doc:id="852f6e06-09ee-4ca9-882c-7fe206e312f4" key="#[payload.result[0].message.from.id]" target="lastMessage"/>
				<choice doc:name="Choice" doc:id="4fd35c25-a1d2-45f3-bf67-f158cefe3b87" >
					<when expression='#[vars.lastMessage == "/drinksbyname"]'>
						<flow-ref doc:name="getDrinksByNameFlow" doc:id="ed5d8a46-03a5-4c92-8aed-2e2bbac78791" name="getDrinksByNameFlow" />
					</when>
					<otherwise >
						<ee:transform doc:name="set bed request message" doc:id="71d1fc44-7964-4d4c-8886-d345ce2e37f5">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	chat_id: payload.result[0].message.chat.id,
	text: "Bad commannd. Select, what you want to get /drinksbyname, /foodbyname"
}]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<telegram:send-message doc:name="Send bed request message" doc:id="b9833390-8064-499b-bf72-974a8462c7e8" config-ref="Telegram_Connector_Config"/>
					</otherwise>
				</choice>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="getDrinksByNameFlow" doc:id="fcc337c0-d588-464e-a4b0-e414c105669f" >
		<set-variable value="#[payload]" doc:name="telegramPayload" doc:id="a11b5e41-d17f-4be1-a302-87c7bce7f30c" variableName="telegramPayload" />
		<http:request method="GET" doc:name="GET /cocktailsName" doc:id="6cbf8bef-91a5-423c-8cba-6c8f69697737" url="http://localhost:8081/cocktailsName">
					<http:query-params><![CDATA[#[output application/java
---
{
	"cocktailByName" : payload.result[0].message.text
}]]]></http:query-params>
				</http:request>
		<foreach doc:name="For Each" doc:id="19866f46-6191-4627-9878-b2f477c6c49d" collection="#[payload.drinks]">
					<set-variable value="#[payload]" doc:name="payloadVar" doc:id="12eeb843-3ca3-4bc6-817b-7b17197382a2" variableName="payloadVar" />
					<telegram:send-message doc:name="Send cocktail name" doc:id="37e69f7e-b326-4761-8b07-df66655d6912" config-ref="Telegram_Connector_Config">
						<telegram:send-text-message-request-content><![CDATA[#[%dw 2.0
output application/json
---
{
	chat_id: vars.telegramPayload.result[0].message.chat.id,
	text: vars.payloadVar.name
}]]]></telegram:send-text-message-request-content>
					</telegram:send-message>
					<choice doc:name="Choice" doc:id="54f7660a-e25b-41b0-9862-cd38fd646dab">
						<when expression="#[not isEmpty(vars.payloadVar.ImageSource)]">
							<telegram:send-photo doc:name="Send cocktail photo" doc:id="e98805ef-dd83-4805-8fd4-89fd85cb8bb2" config-ref="Telegram_Connector_Config">
						<telegram:send-photo-message-request-content><![CDATA[#[%dw 2.0
output application/json
---
{
	
	chat_id: vars.telegramPayload.result[0].message.chat.id,
	photo: vars.payloadVar.ImageSource

}]]]></telegram:send-photo-message-request-content>
					</telegram:send-photo>
						</when>
					</choice>
					<telegram:send-message doc:name="Send coctail Instructions" doc:id="d66cd538-b5dd-4340-bcd2-541060a35d43" config-ref="Telegram_Connector_Config">
						<telegram:send-text-message-request-content><![CDATA[#[%dw 2.0
output application/json
---
{
	chat_id: vars.telegramPayload.result[0].message.chat.id,
	text: vars.payloadVar.Instructions
}]]]></telegram:send-text-message-request-content>
					</telegram:send-message>
				</foreach>
	</sub-flow>
	<flow name="implementationFlow1" doc:id="679390cf-950f-4b59-b0a1-76ff550c4302" >
		<http:listener doc:name="Listener" doc:id="0cdc0d85-2623-4687-8fd8-7c46eb05c69e" config-ref="HTTP_Listener_config" path="/test1"/>
		<file:read doc:name="Read" doc:id="f7dc02ce-94f6-48ea-b113-38d8d841e0e8" path="d:/AnypointStudio/1.jpg"/>
		<ee:transform doc:name="Transform Message" doc:id="273dd91a-aa66-4302-886f-6f7a46f202ba" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output multipart/form-data
---
{
  parts: {
    photo: {
      headers: {
        "Content-Disposition": {
          name: "photo",
          filename: "1.jpg",
          subtype: "form-data"
        },
        "Content-Type": "image/jpeg"
      },
      content: payload    	
    },
    chat_id: {
    	headers: {
        "Content-Disposition": {
          name: "chat_id",
          subtype: "form-data"
        }
      },              
      content : 798006120
    }
  }
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<http:request method="POST" doc:name="Request" doc:id="edbf457e-0728-42b7-8b48-dc95e1aeaba4" url="https://api.telegram.org/bot5563335015:AAHEZ49NA1faZXK8awvppOYKP_oYaT_tTgc/sendPhoto"/>
	</flow>
	<flow name="implementationFlow2" doc:id="0ac3be9b-99bc-4467-aa0c-f4f0df06d27e" >
		<http:listener doc:name="Listener" doc:id="bfef3481-32af-448d-a01e-b3cafe23290c" config-ref="HTTP_Listener_config" path="/test3"/>
		<telegram:send-message doc:name="Send text message" doc:id="34da44d3-bd0e-44ab-a41a-820d4e04d77c" config-ref="Telegram_Connector_Config">
			<telegram:send-text-message-request-content ><![CDATA[#[%dw 2.0
output application/json
---
{
	chat_id: "798006120",
	text: "Hi"
}]]]></telegram:send-text-message-request-content>
		</telegram:send-message>
	</flow>
	<flow name="implementationFlow3" doc:id="a0de6d75-6693-4954-a9a9-6871569e6ba9" >
		<http:listener doc:name="Listener" doc:id="01b4a18f-e8f3-4b6a-b4f7-fdca103de7b4" config-ref="HTTP_Listener_config" path="/test4"/>
		<ee:transform doc:name="Transform Message" doc:id="5e10c06c-2d79-4692-867a-596293bf6d65" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/dw
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
