<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:os="http://www.mulesoft.org/schema/mule/os"
	xmlns:telegram="http://www.mulesoft.org/schema/mule/telegram"
	xmlns:slack="http://www.mulesoft.org/schema/mule/slack" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/slack http://www.mulesoft.org/schema/mule/slack/current/mule-slack.xsd
http://www.mulesoft.org/schema/mule/telegram http://www.mulesoft.org/schema/mule/telegram/current/mule-telegram.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd">
	<flow name="implementationFlow" doc:id="62f7a9aa-b497-4414-8b07-8d7bfe3106b3" initialState="stopped">
		<scheduler doc:name="Scheduler" doc:id="a7c7f22b-b3cb-4933-b919-3904dddfd464" >
			<scheduling-strategy >
				<fixed-frequency frequency="5" timeUnit="SECONDS"/>
			</scheduling-strategy>
		</scheduler>
		<os:retrieve doc:name="updateId" doc:id="9d037029-dc3f-445a-9edb-2e819ff6927d" key="updateId" target="updateId">
			<os:default-value ><![CDATA[#[5656565656556]]]></os:default-value>
		</os:retrieve>
		<telegram:get-updates doc:name="fromChat" doc:id="41503d10-a5e0-4dd1-a5e7-e3f4bdbadab2" config-ref="Telegram_Connector_Config" offset="#[vars.updateId]" limit="#[1]"/>
		<choice doc:name="Choice" doc:id="8b2a663f-3da6-4257-a2ce-eafdb4f67e6a" >
			<when expression="#[not isEmpty(payload.result)]">
				<os:store doc:name="updateId" doc:id="b007f81a-b793-4ed8-892b-97da6e340536" key="updateId">
			<os:value><![CDATA[#[(max(payload.result.*update_id default [])) + 1]]]></os:value>
		</os:store>
				<flow-ref doc:name="answerFlow" doc:id="3bd7e655-5714-4bdf-8445-8343846bdc35" name="answerFlow"/>
				<logger level="INFO" doc:name="payload" doc:id="83112316-383e-4b15-832e-45ff55f1ff0f" message="#[payload]"/>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="No Message Logger" doc:id="8f1be4da-950e-447d-a3e3-f2afec3fbc2f" message='"There is no messages"'/>
			</otherwise>
		</choice>
	</flow>
	<sub-flow name="answerFlow" doc:id="47d8a535-99df-484b-8e9f-3a55a8268d18" >
		<choice doc:name="Choice" doc:id="a671b108-b398-4bc1-877a-55b43831e1cf" >
			<when expression='#[payload.result[0].message.text == "/start"]' >
				<os:store doc:name="Store last message" doc:id="8135b6fd-72e2-4780-b65c-40b6bd2587e1" key="#[payload.result[0].message.from.id]">
					<os:value><![CDATA[#[payload.result[0].message.text]]]></os:value>
				</os:store>
				<ee:transform doc:name="set hello message" doc:id="9ff197ec-34c8-42f6-83b0-7222c7993f42" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	chat_id: payload.result[0].message.chat.id,
	text: "Hi. Select, what you want to get /drinksbyname, /foodbyname"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<telegram:send-message doc:name="Say Hello" doc:id="7d7fc199-e0d4-4dd1-aefb-c569dea70034" config-ref="Telegram_Connector_Config" />
				<logger level="INFO" doc:name="payload" doc:id="85965674-efcc-4849-8273-663ebed41102" message="#[payload]" />
			</when>
			<when expression='#[payload.result[0].message.text == "/drinksbyname"]' >
				<os:store doc:name="Store last message" doc:id="f6de7a9b-ad37-4f5f-a9ae-0935934c77cf" key="#[payload.result[0].message.from.id]">
					<os:value><![CDATA[#[payload.result[0].message.text]]]></os:value>
				</os:store>
				<ee:transform doc:name="set input cocktail name message" doc:id="157137fd-6bc4-45ca-b794-fea9410d7e30" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	chat_id: payload.result[0].message.chat.id,
	text: "Input Cocktail Name"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<telegram:send-message doc:name="Input cocktail Name" doc:id="6bdfc741-c76a-439c-9675-46ffa998503e" config-ref="Telegram_Connector_Config"/>
				<logger level="INFO" doc:name="payload" doc:id="a416c658-3186-4f77-b9d5-ca1d694302a8" message="#[payload]"/>
			</when>
			<when expression='#[payload.result[0].message.text == "/foodbyname"]'>
				<os:store doc:name="Store last message" doc:id="c30d143f-7b1a-44a5-8667-7ffe91b89282" key="#[payload.result[0].message.from.id]">
					<os:value ><![CDATA[#[payload.result[0].message.text]]]></os:value>
				</os:store>
				<ee:transform doc:name="set input food name message" doc:id="2cc4cd74-c71a-4761-affa-a931a1dfcb9c" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	chat_id: payload.result[0].message.chat.id,
	text: "Input Food Name"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<telegram:send-message doc:name="input food name" doc:id="cd72664a-1c66-49ae-8157-400037b04e59" config-ref="Telegram_Connector_Config"/>
				<logger level="INFO" doc:name="payload" doc:id="70345850-01fb-4eea-a756-44dccf40c8f7" message="#[payload]" />
			</when>
			<otherwise>
				<os:retrieve doc:name="lastMessage" doc:id="852f6e06-09ee-4ca9-882c-7fe206e312f4" key="#[payload.result[0].message.from.id]" target="lastMessage"/>
				<choice doc:name="Choice" doc:id="4fd35c25-a1d2-45f3-bf67-f158cefe3b87" >
					<when expression='#[vars.lastMessage == "/drinksbyname"]'>
						<flow-ref doc:name="getDrinksByNameFlow" doc:id="ed5d8a46-03a5-4c92-8aed-2e2bbac78791" name="getDrinksByNameFlow" />
					</when>
					<when expression='#[vars.lastMessage == "/foodbyname"]'>
						<flow-ref doc:name="getFoodByNameFlow" doc:id="ab1e6972-07e9-4826-bdcd-d0008a7c1c0b" name="getFoodByNameFlow"/>
					</when>
					<otherwise >
						<os:store doc:name="Store last message" doc:id="e83fbd4e-e77b-43db-a88d-44665fcc3c7d" key="#[payload.result[0].message.from.id]">
							<os:value><![CDATA[/start]]></os:value>
						</os:store>
						<ee:transform doc:name="set bad request message" doc:id="71d1fc44-7964-4d4c-8886-d345ce2e37f5">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	chat_id: payload.result[0].message.chat.id,
	text: "Bad command. Select, what you want to get /drinksbyname, /foodbyname"
}]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<telegram:send-message doc:name="Send bed request message" doc:id="b9833390-8064-499b-bf72-974a8462c7e8" config-ref="Telegram_Connector_Config">
						</telegram:send-message>
					</otherwise>
				</choice>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="getDrinksByNameFlow" doc:id="fcc337c0-d588-464e-a4b0-e414c105669f" >
		<set-variable value="#[payload]" doc:name="telegramPayload" doc:id="a11b5e41-d17f-4be1-a302-87c7bce7f30c" variableName="telegramPayload" />
		<http:request method="GET" doc:name="GET /cocktailsName" doc:id="6cbf8bef-91a5-423c-8cba-6c8f69697737" url="http://localhost:8081/api/cocktailsName">
					<http:query-params><![CDATA[#[output application/java
---
{
	"cocktailByName" : payload.result[0].message.text
}]]]></http:query-params>
				</http:request>
		<choice doc:name="Choice" doc:id="b335c312-a562-49db-ad2e-b164b4b4102c" >
			<when expression="#[not isEmpty(payload.drinks)]">
				<foreach doc:name="For Each" doc:id="19866f46-6191-4627-9878-b2f477c6c49d" collection="#[payload.drinks]">
					<set-variable value="#[payload]" doc:name="payloadVar" doc:id="12eeb843-3ca3-4bc6-817b-7b17197382a2" variableName="payloadVar" />
					<telegram:send-message doc:name="Send cocktail name" doc:id="37e69f7e-b326-4761-8b07-df66655d6912" config-ref="Telegram_Connector_Config">
						<telegram:send-text-message-request-content><![CDATA[#[%dw 2.0
output application/json
---
{
	chat_id: vars.telegramPayload.result[0].message.chat.id,
	text: vars.payloadVar.name
}]]]></telegram:send-text-message-request-content>
					</telegram:send-message>
			<choice doc:name="Choice" doc:id="54f7660a-e25b-41b0-9862-cd38fd646dab">
						<when expression="#[not isEmpty(vars.payloadVar.ImageSource)]">
							<telegram:send-photo doc:name="Send cocktail photo" doc:id="e98805ef-dd83-4805-8fd4-89fd85cb8bb2" config-ref="Telegram_Connector_Config">
						<telegram:send-photo-message-request-content><![CDATA[#[%dw 2.0
output application/json
---
{
	
	chat_id: vars.telegramPayload.result[0].message.chat.id,
	photo: vars.payloadVar.ImageSource

}]]]></telegram:send-photo-message-request-content>
					</telegram:send-photo>
						</when>
						<otherwise >
							<logger level="INFO" doc:name="No Picture Logger" doc:id="f7670b54-87b2-4f77-a49c-12a5947bf4f2" message='"There is no pictures"' />
						</otherwise>
					</choice>
					<telegram:send-message doc:name="Send coctail Instructions" doc:id="d66cd538-b5dd-4340-bcd2-541060a35d43" config-ref="Telegram_Connector_Config">
						<telegram:send-text-message-request-content><![CDATA[#[%dw 2.0
output application/json
---
{
	chat_id: vars.telegramPayload.result[0].message.chat.id,
	text: vars.payloadVar.Instructions
}]]]></telegram:send-text-message-request-content>
					</telegram:send-message>
				</foreach>
			</when>
			<otherwise >
				<ee:transform doc:name="bad coaktailName  message" doc:id="b28bc7f1-226c-4eec-9f3b-1c05c8a65f43" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	chat_id: vars.telegramPayload.result[0].message.chat.id,
	text: "There is no such cocktail"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<telegram:send-message doc:name="Send bad coaktailName message" doc:id="fd90602d-b868-46b8-81e7-c228d14fa4ee" config-ref="Telegram_Connector_Config" />
			</otherwise>
		</choice>
		<telegram:send-message doc:name="Message select" doc:id="35e88dcc-8841-40ae-92c4-4bd8ae6ea543" config-ref="Telegram_Connector_Config">
						<telegram:send-text-message-request-content><![CDATA[#[%dw 2.0
output application/json
---
{
	chat_id: vars.telegramPayload.result[0].message.chat.id,
	text: "Select, what you want to get /drinksbyname, /foodbyname"
}]]]></telegram:send-text-message-request-content>
					</telegram:send-message>
		<os:store doc:name="Store last message" doc:id="65d0ec23-18ff-4c65-95d6-5a187c9328fe" key="#[vars.telegramPayload.result[0].message.from.id]" >
			<os:value ><![CDATA[/start]]></os:value>
		</os:store>
		<logger level="INFO" doc:name="payload" doc:id="ab3750ec-5f1a-475c-928a-8dc1f99265a2" message="#[payload]" />
	</sub-flow>
	<sub-flow name="getFoodByNameFlow" doc:id="c040cea1-f93d-4517-86d5-e68e16483193" >
		<set-variable value="#[payload]" doc:name="telegramPayload" doc:id="de6f22de-a977-4b6b-a458-8520e663f24f" variableName="telegramPayload" />
		<http:request method="GET" doc:name="GET /foodName" doc:id="19a86d97-d72f-44fb-84ac-78ba75dff16a" url="http://localhost:8081/api/foodName" >
			<http:query-params ><![CDATA[#[output application/java
---
{
	"foodByName" : payload.result[0].message.text
}]]]></http:query-params>
		</http:request>
		<choice doc:name="Choice" doc:id="9620c657-9ca1-4206-a5e8-0a86a2897d87" >
			<when expression="#[not isEmpty(payload.meals)]">
				<foreach doc:name="For Each" doc:id="bd38bc5a-5b7b-4f12-88ce-1ef72a179f20" collection="#[payload.meals]">
			<set-variable value="#[payload]" doc:name="payloadVar" doc:id="c48636ff-cbda-47f7-afc1-4382bbba2579" variableName="payloadVar" />
			<telegram:send-message doc:name="Send food name" doc:id="60ddfaf1-9ea3-4d2b-a072-670c872b7994" config-ref="Telegram_Connector_Config">
				<telegram:send-text-message-request-content><![CDATA[#[%dw 2.0
output application/json
---
{
	chat_id: vars.telegramPayload.result[0].message.chat.id,
	text: vars.payloadVar.Meal
}]]]></telegram:send-text-message-request-content>
			</telegram:send-message>
			<choice doc:name="Choice" doc:id="e5c18cea-1d51-4997-a150-ead46732e42f">
				<when expression="#[not isEmpty(vars.payloadVar.ImageSource)]">
					<telegram:send-photo doc:name="Send food photo" doc:id="bbbb8f65-e4a3-4771-bf3f-4701ce4993fd" config-ref="Telegram_Connector_Config">
						<telegram:send-photo-message-request-content><![CDATA[#[%dw 2.0
output application/json
---
{
	
	chat_id: vars.telegramPayload.result[0].message.chat.id,
	photo: vars.payloadVar.ImageSource

}]]]></telegram:send-photo-message-request-content>
					</telegram:send-photo>
				</when>
						<otherwise >
							<logger level="INFO" doc:name="No Picture Logger" doc:id="9420f452-b497-4979-acc2-8d38256c3d9d" message='"There is no pictures"' />
						</otherwise>
			</choice>
			<telegram:send-message doc:name="Send food Instructions" doc:id="cc02c3fd-891f-40c5-8da4-f3f111a2a011" config-ref="Telegram_Connector_Config">
				<telegram:send-text-message-request-content><![CDATA[#[%dw 2.0
output application/json
---
{
	chat_id: vars.telegramPayload.result[0].message.chat.id,
	text: vars.payloadVar.Instructions
}]]]></telegram:send-text-message-request-content>
			</telegram:send-message>
		</foreach>
			</when>
			<otherwise >
				<ee:transform doc:name="bad foodName  message" doc:id="6aaf0b2c-6d58-43ba-9afe-be5e4ed42a35">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	chat_id: vars.telegramPayload.result[0].message.chat.id,
	text: "There is no such meal"
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<telegram:send-message doc:name="Send bad foodName  message" doc:id="e7d3c2cc-d61b-427a-a70a-e9e694e6d4cb" config-ref="Telegram_Connector_Config" />
			</otherwise>
		</choice>
		<telegram:send-message doc:name="Message select" doc:id="d028bbe6-6756-414e-bceb-0c6330f31848" config-ref="Telegram_Connector_Config">
						<telegram:send-text-message-request-content><![CDATA[#[%dw 2.0
output application/json
---
{
	chat_id: vars.telegramPayload.result[0].message.chat.id,
	text: "Select, what you want to get /drinksbyname, /foodbyname"
}]]]></telegram:send-text-message-request-content>
					</telegram:send-message>
		<os:store doc:name="Store last message" doc:id="01c27de3-24a0-4e84-a73c-2d3b73c3c5bd" key="#[vars.telegramPayload.result[0].message.from.id]" >
			<os:value ><![CDATA["/start"]]></os:value>
		</os:store>
		<logger level="INFO" doc:name="payload" doc:id="b0490d39-0533-4900-8fb1-708e81279964" message="#[payload]" />
	</sub-flow>
</mule>
